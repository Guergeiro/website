{
    "Exceptions": {
        "HttpException": [
            {
                "doc_block": "/**\n* @memberof Drash.Exceptions\n* @class HttpException\n*\n* @description\n*     This class gives you a way to throw HTTP errors semantically.\n*\n*     This class extends `Error`.\n*/\n",
                "signature": "export default class HttpException extends Error { }",
                "member_type": "class"
            },
            {
                "doc_block": "/**\n* @description\n*     A property to hold the HTTP response code associated with this\n*     exception.\n*\n* @property number code\n*/\n",
                "signature": "public code: number;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     Construct an object of this class.\n*\n* @param number code\n*     The HTTP response code associated with this exception.\n* @param string message\n*     (optional) The exception message.\n*/\n",
                "signature": "constructor(code: number, message?: string) { }",
                "member_type": "method"
            }
        ],
        "HttpMiddlewareException": [
            {
                "doc_block": "/**\n* @memberof Drash.Exceptions\n* @class HttpMiddlewareException\n*\n* @description\n*     This class gives you a way to throw HTTP errors semantically in the\n*     middleware classes. The difference between this class and `HttpException`\n*     comes when you want to check which exception was thrown via\n*     `exception.constructor.name`.\n*\n*     This class extends `Error`.\n*/\n",
                "signature": "export default class HttpMiddlewareException extends Error { }",
                "member_type": "class"
            },
            {
                "doc_block": "/**\n* @description\n*     A property to hold the HTTP response code associated with this\n*     exception.\n*\n* @property number code\n*/\n",
                "signature": "public code: number;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     Construct an object of this class.\n*\n* @param number code\n*     The HTTP response code associated with this exception.\n* @param string message\n*     (optional) The exception message.\n*/\n",
                "signature": "constructor(code: number, message?: string) { }",
                "member_type": "method"
            }
        ]
    },
    "Http": {
        "Middleware": [
            {
                "doc_block": "/**\n* @memberof Drash.Http\n* @class Middleware\n*\n* @description\n*     This is the base middleware class for all middleware classes.\n*/\n",
                "signature": "export default abstract class Middleware { }",
                "member_type": "class"
            },
            {
                "doc_block": "/**\n* @description\n*     A property to hold the location that this middleware should process.\n*\n* @property string location\n*/\n",
                "signature": "public location: string;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     A property to hold the name of this middleware class. This property is\n*     used by `Drash.Http.Server` to help it store middleware in the correct\n*     `middleware_*` property.\n*\n* @property string name\n*/\n",
                "signature": "public name: string;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     A property to hold the request object.\n*\n* @property any request\n*/\n",
                "signature": "protected request: any;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     A property to hold the resource object. This property will only contain\n*     the resource object if this middleware is a resource-level middleware.\n*\n* @property Drash.Http.Resource resource\n*/\n",
                "signature": "protected resource: Drash.Http.Resource;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     A property to hold the response object. This property will only contain\n*     the response object if the server was able to get a response from the\n*     resource.\n*\n* @property Drash.Http.Resource resource\n*/\n",
                "signature": "protected response: Drash.Http.Response;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     A property to hold the server object handling this middleware.\n*\n* @property Drash.Http.Server server\n*/\n",
                "signature": "protected server: Drash.Http.Server;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @param any request\n*     The request object.\n* @param Drash.Http.Server server\n*     The server object handling this middleware.\n* @param Drash.Http.Resource resource\n*     (optional) If this is a resource-level middleware, then it will have\n*     access to the resource that uses it.\n*/\n",
                "signature": "constructor(request: any,server: Drash.Http.Server,resource?: Drash.Http.Resource,response?: Drash.Http.Response) { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Run this middleware.\n*/\n",
                "signature": "abstract run();",
                "member_type": "method"
            }
        ],
        "Resource": [
            {
                "doc_block": "/**\n* @memberof Drash.Http\n* @class Resource\n*\n* @description\n*     This is the base resource class for all resources. All resource classes\n*     must be derived from this class.\n*/\n",
                "signature": "export default class Resource { }",
                "member_type": "class"
            },
            {
                "doc_block": "/**\n* @description\n*     A property to hold the middleware this resource uses.\n*\n*     All derived middleware classes MUST define this property as `static`\n*     (e.g., `static middleware = [\"MiddlewareClass\"];`)\n*\n* @property string[] middleware\n*/\n",
                "signature": "public middleware: string[];",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     A property to hold the name of this resource. This property is used by\n*     `Drash.Http.Server` to help it store resources in its `resources`\n*     property by name.\n*\n* @property string name\n*/\n",
                "signature": "public name: string;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     A property to hold the paths to access this resource.\n*\n*     All derived resource classes MUST define this property as `static`\n*     (e.g., `static paths = [\"path\"];`)\n*\n* @property string[] paths\n*/\n",
                "signature": "public paths: string[];",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     The request object.\n*\n* @property ServerRequest request\n*/\n",
                "signature": "protected request;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     The response object.\n*\n* @property Drash.Http.Response response\n*/\n",
                "signature": "protected response: Drash.Http.Response;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     The server object.\n*\n* @property Drash.Http.Server server\n*/\n",
                "signature": "protected server: Drash.Http.Server;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     Construct an object of this class.\n*\n* @param ServerRequest request\n*     The request object.\n* @param Drash.Http.Response response\n*     The response object.\n* @param Drash.Http.Server server\n*     The server object.\n*/\n",
                "signature": "constructor(request,response: Drash.Http.Response,server: Drash.Http.Server) { }",
                "member_type": "method"
            }
        ],
        "Response": [
            {
                "doc_block": "/**\n* @memberof Drash.Http\n* @class Response\n*\n* @description\n*     Response handles sending a response to the client making the request.\n*/\n",
                "signature": "export default class Response { }",
                "member_type": "class"
            },
            {
                "doc_block": "/**\n* @description\n*     A property to hold the body of this response.\n*\n* @property any body\n*/\n",
                "signature": "public body: any = {};",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     A property to hold this response's headers.\n*\n* @property Headers headers\n*/\n",
                "signature": "public headers: Headers;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     The request object.\n*\n* @property ServerRequest request\n*/\n",
                "signature": "public request;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     A property to hold this response's status code (e.g., 200 for OK).\n*     This class uses `Status` and `STATUS_TEXT` from the Deno Standard\n*     Modules' http_status module for response codes.\n*\n* @property number status_code\n*/\n",
                "signature": "public status_code: number = Status.OK;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     Construct an object of this class.\n*\n* @param ServerRequest request\n*/\n",
                "signature": "constructor(request) { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Generate a response.\n*\n* @return any\n*/\n",
                "signature": "public generateResponse(): any { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Get the status message based on the status code.\n*\n* @return string\n*     Returns the status message associated with `this.status_code`. For\n*     example, if the response's `status_code` is `200`, then this method\n*     will return \"OK\" as the status message.\n*/\n",
                "signature": "public getStatusMessage(): string { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Get the full status message based on the status code. This is just the\n*     status code and the status message together (e.g., `200 (OK)`, `401\n*     (Unauthorized)`, etc.).\n*\n* @return string\n*/\n",
                "signature": "public getStatusMessageFull(): string { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Send the response to the client making the request.\n*\n* @return Promise<any>\n*     Returns the output which is passed to `request.respond()`. The output\n*     is only returned for unit testing purposes. It is not intended to be\n*     used elsewhere as this call is the last call in the\n*     request-resource-response lifecycle.\n*/\n",
                "signature": "public async send(): Promise<any> { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Send the response of a static asset (e.g., a CSS file, JS file, PDF\n*     file, etc.) to the client making the request.\n*\n* @param string file\n*     The file that will be served to the client.\n*\n* @return any\n*/\n",
                "signature": "public sendStatic(file): any { }",
                "member_type": "method"
            }
        ],
        "Server": [
            {
                "doc_block": "/**\n* @memberof Drash.Http\n* @class Server\n*\n* @description\n*     Server handles the entire request-resource-response lifecycle. It is in\n*     charge of handling HTTP requests to resources, static paths, sending\n*     appropriate responses, and handling any errors that bubble up within the\n*     request-resource-response lifecycle.\n*/\n",
                "signature": "export default class Server { }",
                "member_type": "class"
            },
            {
                "doc_block": "/**\n* @description\n*     A property to hold the Deno server. This property is set in\n*     `this.run()` like so: ` this.deno_server =\n*     serve(this.configs.address);`. `serve()` is imported from\n*     [https://deno.land/x/http/server.ts](https://deno.land/x/http/server.ts).\n*\n* @property any deno_server\n*/\n",
                "signature": "public deno_server: any;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     A property to hold this server's logger.\n*\n* @property Drash.Loggers.ConsoleLogger|Drash.Loggers.FileLogger logger\n*/\n",
                "signature": "public logger: Drash.CoreLoggers.ConsoleLogger | Drash.CoreLoggers.FileLogger;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     A property to hold this server's configs.\n*\n* @property any configs\n*/\n",
                "signature": "protected configs: any;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     A property to hold the location of this server on the filesystem. This\n*     property is used when resolving static paths.\n*\n* @property string directory\n*/\n",
                "signature": "protected directory: string;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     A property to hold middleware.\n*\n* @property any middleware\n*/\n",
                "signature": "protected middleware: any = { }",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     A property to hold the resources passed in from the configs.\n*\n* @property any[] resources\n*/\n",
                "signature": "protected resources: any[] = [];",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     This server's list of static paths. HTTP requests to a static path are\n*     usually intended to retrieve some type of concrete resource (e.g., a\n*     CSS file or a JS file). If an HTTP request is matched to a static path\n*     and the resource the HTTP request is trying to get is found, then\n*     `Drash.Http.Response` will use its `sendStatic()` method to send the\n*     static asset back to the client.\n*\n* @property string[] static_paths\n*/\n",
                "signature": "protected static_paths: string[] = [];",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     Construct an object of this class.\n*\n* @param any configs\n*     `address`: `string`\n*\n*     `logger`: `Drash.Loggers.ConsoleLogger|Drash.Loggers.FileLogger`\n*\n*     `response_output`: `string` (a proper MIME type)\n*\n*     `resources`: `Drash.Http.Resource[]`\n*\n*     `static_paths`: `string[]`\n*/\n",
                "signature": "constructor(configs: any) { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Get the request object with more properties and methods.\n*\n* @param any request\n*     The request object.\n*\n* @return any\n*     Returns any \"request\" object with more properties and methods that\n*     Drash uses. For example, deno uses the `ServerRequest` object; and this\n*     method takes that object and hydrates it with more properties and\n*     methods.\n*/\n",
                "signature": "public async getRequest(request: any): Promise<any> { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Handle an HTTP request from the Deno server.\n*\n* @param any request\n*     The request object.\n*\n* @return Promise<any>\n*    See `Drash.Http.Response.send()`.\n*/\n",
                "signature": "public async handleHttpRequest(request): Promise<any> { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Handle cases when an error is thrown when handling an HTTP request.\n*\n* @param any request\n*     The request object.\n* @param any error\n*     The error object.\n*\n* @return any\n*     See `Drash.Http.Response.send()`.\n*/\n",
                "signature": "public handleHttpRequestError(request: any,error: any,resource: Drash.Http.Resource = null,response: Drash.Http.Response = null): any { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Handle HTTP requests for the favicon. This method only exists to\n*     short-circuit favicon requests--preventing the requests from clogging\n*     the logs.\n*\n* @param any request\n*\n* @return any\n*     Returns the response as stringified JSON. This is only used for unit\n*     testing purposes.\n*/\n",
                "signature": "public handleHttpRequestForFavicon(request): any { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Handle HTTP requests for static path assets.\n*\n* @param any request\n*\n* @return any\n*     Returns the response as stringified JSON. This is only used for unit\n*     testing purposes.\n*/\n",
                "signature": "public handleHttpRequestForStaticPathAsset(request): any { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Run the Deno server at the address specified in the configs. This\n*     method takes each HTTP request and creates a new and more workable\n*     request object and passes it to\n*     `Drash.Http.Server.handleHttpRequest()`.\n*\n* @return Promise<void>\n*     This method just listens for requests at the address you provide in the\n*     configs.\n*/\n",
                "signature": "public async run(options?: RunOptions): Promise<void> { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Close the server.\n*/\n",
                "signature": "public close() { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Add an HTTP resource to the server which can be retrieved at specific\n*     URIs.\n*\n*     Drash defines an HTTP resource according to the MDN Web docs\n*     [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Identifying_resources_on_the_Web).\n*\n* @param Drash.Http.Resource resourceClass\n*     A child object of the `Drash.Http.Resource` class.\n*\n* @return void\n*     This method just adds `resourceClass` to `this.resources` so it can be\n*     used (if matched) during an HTTP request.\n*/\n",
                "signature": "protected addHttpResource(resourceClass: Drash.Http.Resource): void { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Add server-level and resource-level middleware.\n*\n* @param any middleware\n*\n* @return void\n*/\n",
                "signature": "protected addMiddleware(middleware: any): void { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Add a static path for serving static assets like CSS files, JS files,\n*     PDF files, etc.\n*\n* @param string path\n*\n* @return void\n*     This method just adds `path` to `this.static_paths` so it can be used (if\n*     matched) during an HTTP request.\n*/\n",
                "signature": "protected addStaticPath(path: string): void { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Execute resource-level middleware after the request.\n*\n* @param any request\n*     The request object.\n* @param Drash.Http.Resource resource\n*     The resource object.\n*\n* @return void\n*/\n",
                "signature": "protected executeMiddlewareResourceLevelAfterRequest(request,resource,response) { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Execute resource-level middleware before the request.\n*\n* @param any request\n*     The request object.\n* @param Drash.Http.Resource resource\n*     The resource object.\n*\n* @return void\n*/\n",
                "signature": "protected executeMiddlewareResourceLevelBeforeRequest(request, resource) { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Execute server-level middleware before the request.\n*\n* @param any request\n*     The request object.\n* @param Drash.Http.Resource resource\n*     The resource object.\n*\n* @return void\n*/\n",
                "signature": "protected executeMiddlewareServerLevelBeforeRequest(request) { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Execute server-level middleware after the request.\n*\n* @param any request\n*     The request object.\n* @param Drash.Http.Resource resource\n*     The resource object.\n*\n* @return void\n*/\n",
                "signature": "protected executeMiddlewareServerLevelAfterRequest(request,resource,response) { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* Get an HTTP error response exception object.\n*\n* @param number code\n*\n* @return Drash.Exceptions.HttpException\n*/\n",
                "signature": "protected httpErrorResponse(code: number): Drash.Exceptions.HttpException { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Get the resource class.\n*\n* @param any request\n*     The request object.\n*\n* @return Drash.Http.Resource|undefined\n*     Returns a `Drash.Http.Resource` object if the URL path of the request\n*     can be matched to a `Drash.Http.Resource` object's paths.\n*\n*     Returns `undefined` if a `Drash.Http.Resource` object can't be matched.\n*/\n",
                "signature": "protected getResourceClass(request): Drash.Http.Resource | undefined { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Is the request targeting a static path?\n*\n* @param any request\n*\n* @return boolean\n*     Returns true if the request targets a static path.\n*/\n",
                "signature": "protected requestTargetsStaticPath(request): boolean { }",
                "member_type": "method"
            }
        ]
    },
    "Interfaces": {
        "LoggerConfigs": [
            {
                "doc_block": "/**\n* @memberof Drash.Interfaces.LoggerConfigs\n* @interface LoggerConfigs\n*\n* @description\n*     `enabled`: Is the logger enabled? This is useful if you have a config\n*     file that can toggle this option between `true` and `false`.\n*\n*     `level`: Options are `all`, `trace`, `debug`, `info`, `warn`, `error`, `fatal`, and `off`.\n*\n*     `tag_string`: This only takes a string with tags as `{tag}`. For example, `{some_tag} | {some_tag} * {some_tag} [{some_tag}]`.\n*\n*     `tag_string_fns`: This takes an object of key-value pairs where the key is the name of the tag defined in the `tag_string` config. This object is used to replace tags in the `tag_string` config by matching keys to tags and replacing tags with the values of the keys. For example, if `tag_string` was `{my_cool_tag}` and `tags_string_fns.my_cool_tag` returns `\"HELLO\"`, then `{my_cool_tag}` would be replaced with `HELLO`.\n*/\n",
                "signature": "export interface LoggerConfigs { }",
                "member_type": "method"
            }
        ]
    },
    "Loggers": {
        "ConsoleLogger": [
            {
                "doc_block": "/**\n* @memberof Drash.CoreLoggers\n* @class ConsoleLogger\n*\n* @description\n*     This logger allows you to log messages to the console.\n*/\n",
                "signature": "export default class ConsoleLogger extends Logger { }",
                "member_type": "class"
            },
            {
                "doc_block": "/**\n* @description\n*     Construct an object of this class.\n*\n* @param any configs\n*     See `Drash.CoreLoggers.Logger.configs`.\n*/\n",
                "signature": "constructor(configs) { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Write a log message to the console.\n*\n*     This method is not intended to be called directly. It is already used\n*     in the base class (`Logger`) and automatically called.\n*\n* @param any logMethodLevelDefinition\n* @param string message\n*\n* @return string\n*     Returns the log message which is used for unit testing purposes.\n*/\n",
                "signature": "public write(logMethodLevelDefinition, message): string { }",
                "member_type": "method"
            }
        ],
        "FileLogger": [
            {
                "doc_block": "/**\n* @memberof Drash.CoreLoggers\n* @class FileLogger\n*\n* @description\n*     This logger allows you to log messages to a file.\n*/\n",
                "signature": "export default class FileLogger extends Logger { }",
                "member_type": "class"
            },
            {
                "doc_block": "/**\n* @description\n*     The file this logger will write log messages to.\n*\n* @property string file\n*/\n",
                "signature": "protected file: string;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     Construct an object of this class.\n*\n* @param any configs\n*     See `Drash.CoreLoggers.Logger.configs`.\n*\n*/\n",
                "signature": "constructor(configs) { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Write a log message to `this.file`.\n*\n*     This method is not intended to be called directly. It is already used\n*     in the base class (`Logger`) and automatically called.\n*\n* @param any logMethodLevelDefinition\n* @param string message\n*\n* @return string\n*     Returns the log message which is used for unit testing purposes.\n*/\n",
                "signature": "public write(logMethodLevelDefinition, message): string { }",
                "member_type": "method"
            }
        ],
        "Logger": [
            {
                "doc_block": "/**\n* @memberof Drash.CoreLoggers\n* @class Logger\n*\n* @description\n*     This Logger is the base logger class for all logger classes.\n*/\n",
                "signature": "export default abstract class Logger { }",
                "member_type": "class"
            },
            {
                "doc_block": "/**\n* @description\n*     This logger's configs. See [LoggerConfigs](/#/api-reference/interfaces/logger-configs).\n*\n* @property any configs\n*/\n",
                "signature": "protected configs: LoggerConfigs;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @description\n*     The level of the log message currently being written.\n*\n* @property string current_log_message_level_name\n*/\n",
                "signature": "protected current_log_message_level_name: string;",
                "member_type": "property"
            },
            {
                "doc_block": "/**\n* @doc-blocks-to-json ignore-doc-block\n*/\n",
                "signature": "protected test: boolean = false;",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Construct an object of this class.\n*\n* @param any configs\n*     See [Drash.CoreLoggers.Logger.configs](/#/api-reference/loggers/logger#configs).\n*/\n",
                "signature": "constructor(configs: any) { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Write a log message.\n*\n* @param any logMethodLevelDefinition\n* @param string message\n*/\n",
                "signature": "abstract write(logMethodLevelDefinition, message);",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Output a DEBUG level log message.\n*\n* @param string message\n*     The log message.\n*/\n",
                "signature": "public debug(message) { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Output an ERROR level log message.\n*\n* @param string message\n*     The log message.\n*/\n",
                "signature": "public error(message) { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Output a FATAL level log message.\n*\n* @param string message\n*     The log message.\n*/\n",
                "signature": "public fatal(message) { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Output an INFO level log message.\n*\n* @param string message\n*     The log message.\n*/\n",
                "signature": "public info(message) { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Output a TRACE level log message.\n*\n* @param string message\n*     The log message.\n*/\n",
                "signature": "public trace(message) { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Output a WARN level log message.\n*\n* @param string message\n*     The log message.\n*/\n",
                "signature": "public warn(message) { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Get the parsed version of the raw tag string.\n*\n* @return string\n*/\n",
                "signature": "protected getTagStringParsed(): string { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Send the message to the write method (which should be in the child\n*     class).  Also, do some prechecks before sending to see if the log\n*     message should be written.\n*\n* @param any logMethodLevelDefinition\n*     The dictionary definition of the log message's level.\n* @param string message\n*     The log message.\n*\n* @return string\n*     Returns the log message which is used for unit testing purposes.\n*/\n",
                "signature": "protected sendToWriteMethod(logMethodLevelDefinition, message): string { }",
                "member_type": "method"
            }
        ],
        "Server": ""
    },
    "Services": {
        "HttpService": [
            {
                "doc_block": "/**\n* @memberof Drash.Services\n* @class HttpService\n*\n* @description\n*     This class helps perform HTTP-related processes.\n*/\n",
                "signature": "export default class HttpService { }",
                "member_type": "class"
            },
            {
                "doc_block": "/**\n* @description\n*     Get a MIME type for a file based on its extension.\n*\n* @param string filePath\n*     The file path in question.\n* @param boolean fileIsUrl\n*     (optional) Is the file path  a URL to a file? Defaults to false.\n*\n*     If the file path is a URL, then this method will make sure the URL\n*     query string is not included while doing a lookup of the file's\n*     extension.\n*\n* @return string\n*     Returns the name of the MIME type based on the extension of the\n*     file path .\n*/\n",
                "signature": "public getMimeType(filePath: string, fileIsUrl: boolean = false): string { }",
                "member_type": "method"
            }
        ],
        "HttpRequestService": [
            {
                "doc_block": "/**\n* @memberof Drash.Services\n* @class HttpRequestService\n*\n* @description\n*     This class helps perform HTTP request related processes.\n*/\n",
                "signature": "export default class HttpRequestService { }",
                "member_type": "class"
            },
            {
                "doc_block": "/**\n* @description\n*     Parse this request's body as `multipart/form-data` and get the\n*     requested input.\n*\n* @param string file\n*     The file to get by its name.\n* @param number maxMemory\n*     The max memory to allocate for this process. Defaults to 1MB.\n*\n* @return any\n*     Returns a body as a parsable JSON object where the first level of keys\n*     are the names of the parts. For example, if the name of the first part\n*     is `file_number_one`, then it will be accessible in the returned object\n*     as `{returned_object}.file_number_one`.\n*/\n",
                "signature": "public getRequestBodyFile(parsedBody: ParsedBody, input: string): any { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Get the value of one of this request's body params by its input name.\n*     First, check the Content-Type of the request so that we know how to\n*     parse the body. Then parse the body accordingly and retrieve the\n*     requested value.\n*\n* @return any\n*/\n",
                "signature": "public getRequestBodyParam(parsedBody: ParsedBody, input: string): any { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Get the value of one of this request's headers by its input name.\n*\n* @return string\n*/\n",
                "signature": "public getRequestHeaderParam(request: any, input: string): string { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Get the value of one of this request's path params by its input name.\n*\n* @return string\n*/\n",
                "signature": "public getRequestPathParam(request: any, input: string): string { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Get the value of one of this request's query params by its input name.\n*\n* @return string\n*/\n",
                "signature": "public getRequestUrlQueryParam(request: any, input: string): string { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Get the request's requested content type.\n*\n*     There are three ways to get this value: (1) the request's headers by\n*     setting `Response-Content-Type: \"type\"`, (2) the request's URL query\n*     params by setting `?response_content_type=type`, and the request's body\n*     by setting `{response_content_type: \"type\"}`.\n*\n*     The request's body takes precedence over all other settings.\n*\n*     The request's URL query params takes precedence over the header setting\n*     and the default setting.\n*\n*     The request's header setting takes precedence over the default setting.\n*\n*     If no content type is specified by the request's body, URL query\n*     params, or header, then the default content type will be used. The\n*     default content type is the content type defined in the\n*     `Drash.Http.Server` object's `response_output` config. If a default is\n*     not specified, then \"application/json\" will be used.\n*/\n",
                "signature": "public getResponseContentType(request: any,defaultContentType: string = \"application/json\"): void { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Get this request's URL path.\n*\n* @return string\n*     Returns the URL path.\n*/\n",
                "signature": "public getUrlPath(request): string { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Get the request's URL query params by parsing its URL query string.\n*\n* @param any request\n*     The request object.\n*\n* @return any\n*     Returns the URL query string in key-value pair format.\n*/\n",
                "signature": "public getUrlQueryParams(request: any): any { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Get the specified HTTP request's URL query string.\n*\n* @return string\n*     Returns the URL query string (e.g., key1=value1&key2=value2) without\n*     the leading \"?\" character.\n*/\n",
                "signature": "public getUrlQueryString(request: any): string { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Does the specified request have a body?\n*\n* @return Promise<any>\n*     Returns `true` if the request has a body. Returns `false` if not.\n*/\n",
                "signature": "public async hasBody(request: any): Promise<any> { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Hydrate the specified request object.\n*\n* @return Promise<any>\n*     Returns a hydrated request object. For example, deno uses the\n*     `ServerRequest` object. This method takes that object and adds more\n*     porperties and methods to it. This makes it easier for Drash to process\n*     the object for its own purposes.\n*/\n",
                "signature": "public async hydrate(request: any, options?: any): Promise<any> { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Parse the specified request's body.\n*/\n",
                "signature": "public async parseBody(request: any, options: any = { }}): Promise<ParsedBody> {",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*    Parse this request's body as application/x-www-form-url-encoded.\n*\n* @return Promise<any>\n*/\n",
                "signature": "public async parseBodyAsFormUrlEncoded(request: any): Promise<any> { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*    Parse this request's body as application/json.\n*\n* @return Promise<any>\n*/\n",
                "signature": "public async parseBodyAsJson(request: any): Promise<any> { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*    Parse this request's body as multipart/form-data.\n*\n* @param Reader body\n*     The request's body.\n* @param string boundary\n*     The boundary of the part (e.g., `----------437192313`)\n* @param number maxMemory\n*     The maximum memory to allocate to this process in megabytes.\n*\n* @return Promise<any>\n*/\n",
                "signature": "public async parseBodyAsMultipartFormData(body: Reader,boundary: string,maxMemory: number): Promise<any> { }",
                "member_type": "method"
            },
            {
                "doc_block": "/**\n* @description\n*     Set headers on the request.\n*\n* @param any request\n* @param any headers\n*/\n",
                "signature": "public setHeaders(request: any, headers: any) { }",
                "member_type": "method"
            }
        ]
    }
}
